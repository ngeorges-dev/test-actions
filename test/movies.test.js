const request = require('supertest');
const app = require('../index');

describe('API Movies', () => {
  it('üîé Devrait retourner tous les films', async () => {
    const res = await request(app).get('/movies');
    expect(res.statusCode).toBe(200);
    expect(res.body.length).toBeGreaterThan(0);
  });

  it('‚ûï Devrait ajouter un nouveau film', async () => {
    const newMovie = { title: 'Dune', director: 'Denis Villeneuve' };
    const res = await request(app).post('/movies').send(newMovie);

    expect(res.statusCode).toBe(201);
    expect(res.body.title).toBe('Dune');
  });

  it('üîé Devrait r√©cup√©rer un film sp√©cifique', async () => {
    const newMovie = { title: 'Terminator', director: 'James Cameron' };
    const createRes = await request(app).post('/movies').send(newMovie); // Ajoute un film

    const movieId = createRes.body.id; // Supposons que l'ID est renvoy√© dans la r√©ponse du POST
    const res = await request(app).get(`/movies/${movieId}`); // R√©cup√®re ce film via son ID

    expect(res.statusCode).toBe(200);
    expect(res.body.title).toBe('Terminator');
    expect(res.body.director).toBe('James Cameron');
  });

  it('üóëÔ∏è Devrait supprimer un film', async () => {
    const newMovie = {
      title: 'The Matrix',
      director: 'Lana et Lilly Wachowski',
    };
    const createRes = await request(app).post('/movies').send(newMovie); // Ajoute un film

    const movieId = createRes.body.id; // R√©cup√®re l'ID du film ajout√©
    const deleteRes = await request(app).delete(`/movies/${movieId}`); // Supprime ce film via son ID

    expect(deleteRes.statusCode).toBe(200); // Le code de statut devrait √™tre 200 pour la suppression r√©ussie
    expect(deleteRes.body.message).toBe('Film supprim√© avec succ√®s'); // V√©rifie le message de r√©ponse
  });
});
